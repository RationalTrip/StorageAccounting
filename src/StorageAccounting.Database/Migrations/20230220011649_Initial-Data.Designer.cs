// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StorageAccounting.Database.Contexts;

#nullable disable

namespace StorageAccounting.Database.Migrations
{
    [DbContext(typeof(StorageAccountingDbContext))]
    [Migration("20230220011649_Initial-Data")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StorageAccounting.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 10L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RequiredArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Router",
                            RequiredArea = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Switch",
                            RequiredArea = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Server",
                            RequiredArea = 5
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cluster",
                            RequiredArea = 50
                        },
                        new
                        {
                            Id = 5,
                            Name = "Miner",
                            RequiredArea = 4
                        });
                });

            modelBuilder.Entity("StorageAccounting.Domain.Entities.RentingContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 50L);

                    b.Property<int>("EquipmentCount")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RentingContracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EquipmentCount = 3,
                            EquipmentId = 2,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            EquipmentCount = 2,
                            EquipmentId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            EquipmentCount = 20,
                            EquipmentId = 1,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 4,
                            EquipmentCount = 15,
                            EquipmentId = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 5,
                            EquipmentCount = 10,
                            EquipmentId = 3,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 6,
                            EquipmentCount = 10,
                            EquipmentId = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 7,
                            EquipmentCount = 15,
                            EquipmentId = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 8,
                            EquipmentCount = 150,
                            EquipmentId = 1,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 9,
                            EquipmentCount = 50,
                            EquipmentId = 2,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 10,
                            EquipmentCount = 10,
                            EquipmentId = 3,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 11,
                            EquipmentCount = 6,
                            EquipmentId = 4,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 12,
                            EquipmentCount = 60,
                            EquipmentId = 1,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 13,
                            EquipmentCount = 40,
                            EquipmentId = 1,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 14,
                            EquipmentCount = 50,
                            EquipmentId = 2,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 15,
                            EquipmentCount = 35,
                            EquipmentId = 1,
                            RoomId = 5
                        });
                });

            modelBuilder.Entity("StorageAccounting.Domain.Entities.StorageRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 10L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TotalArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StorageRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dorm: Lomonosova 35",
                            TotalArea = 10
                        },
                        new
                        {
                            Id = 2,
                            Name = "Office: Kyiv, Polyva 21",
                            TotalArea = 250
                        },
                        new
                        {
                            Id = 3,
                            Name = "Verkhovna Rada of Ukraine: Kyiv, Bankova 6-8",
                            TotalArea = 1000
                        },
                        new
                        {
                            Id = 4,
                            Name = "Frex: Faculty",
                            TotalArea = 800
                        },
                        new
                        {
                            Id = 5,
                            Name = "Storage: general",
                            TotalArea = 50
                        },
                        new
                        {
                            Id = 6,
                            Name = "Shelter: it must be empty, because you should be there when air alarm",
                            TotalArea = 100
                        });
                });

            modelBuilder.Entity("StorageAccounting.Domain.Entities.RentingContract", b =>
                {
                    b.HasOne("StorageAccounting.Domain.Entities.Equipment", "Equipment")
                        .WithMany("Contracts")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StorageAccounting.Domain.Entities.StorageRoom", "Room")
                        .WithMany("Contracts")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("StorageAccounting.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("StorageAccounting.Domain.Entities.StorageRoom", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
